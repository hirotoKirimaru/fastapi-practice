name: Test

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed

env:
  BUILD_TARGET: test

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Pull Docker image
        run: |
          LOCK_HASH=$(sha1sum < uv.lock | cut -d' ' -f1)
          RUNTIME_TAG="python-$LOCK_HASH"
          docker pull kirimaru/fastapi-practice_dev-runtime:$RUNTIME_TAG
          echo "RUNTIME_TAG=$RUNTIME_TAG" >> $GITHUB_ENV
          echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV

      - name: Compose up
        run: |
          echo "The value of MY_ENV_VAR is ${{ env.MY_ENV_VAR }}"
          echo "The value of RUNTIME_TAG is ${{ env.RUNTIME_TAG }}"
          docker compose up -d

      - name: DB migration
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: docker compose exec api alembic upgrade head

      - name: Run tests
        run: docker compose exec -T api pytest --alluredir=/app/allure-results

      - name: Copy Allure results from container
        run: |
          docker cp $(docker compose ps -q api):/app/allure-results ./allure-results

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.9
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

# なぜかエラーになるので後ろにもっていく
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install Dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.lock
#          pip install -r requirements-dev.lock
#      - name: Lint with Ruff
#        run: |
#          ruff .
#        continue-on-error: true
#      - name: build
#        run: export $(cat docker.env | xargs) && docker buildx bake